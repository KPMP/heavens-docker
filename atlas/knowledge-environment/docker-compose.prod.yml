version: "3.5"
services:

  pegasus-spring:
    container_name: pegasus-spring
    image: ${ENV_PEGASUS_CONTAINER} 
    depends_on: 
      - mariadb
    ports:
      - "${ENV_APACHE_TOMCAT_PORT:-3030}:3030"
    environment:
      SPRING_BOOT_ENVIRONMENT: ${ENV_DOCKER_ENVIRONMENT}
      MYSQL_HOST: ${ENV_MYSQL_HOST}
      MYSQL_USER: ${ENV_MYSQL_USER}
      MYSQL_PASSWORD: ${ENV_MYSQL_PASSWORD}
      TZ: "America/Detroit"
    privileged: true
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "${ENV_FLUENTD_ADDRESS}"
        tag: "pegasus-data"
    networks:
      local:
        aliases:
          - pegasus-spring
          
  hubble-spring:
    container_name: hubble-spring
    image: ${ENV_HUBBLE_CONTAINER} 
    depends_on: 
      - mariadb
    ports:
      - "3040:3030"
    environment:
      SPRING_BOOT_ENVIRONMENT: ${ENV_DOCKER_ENVIRONMENT}
      MYSQL_HOST: ${ENV_MYSQL_HOST}
      MYSQL_USER: ${ENV_MYSQL_USER}
      MYSQL_PASSWORD: ${ENV_MYSQL_PASSWORD}
      ES_API_TOKEN: ${ENV_ES_API_TOKEN}
      TZ: "America/Detroit"
    privileged: true
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "${ENV_FLUENTD_ADDRESS}"
        tag: "hubble-data"
    networks:
      local:
        aliases:
          - hubble-spring 

  hydra-spring:
    container_name: hydra-spring
    image: ${ENV_HYDRA_CONTAINER} 
    depends_on: 
      - mariadb
    ports:
      - "3050:3030"
    environment:
      SPRING_BOOT_ENVIRONMENT: ${ENV_DOCKER_ENVIRONMENT}
      MYSQL_HOST: ${ENV_MYSQL_HOST}
      MYSQL_USER: ${ENV_MYSQL_USER}
      MYSQL_PASSWORD: ${ENV_MYSQL_PASSWORD}
      ES_API_TOKEN: ${ENV_ES_API_TOKEN}
      TZ: "America/Detroit"
    privileged: true
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "${ENV_FLUENTD_ADDRESS}"
        tag: "hydra-data"
    networks:
      local:
        aliases:
          - hydra-spring          

  mariadb:
    container_name: mariadb
    image: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${ENV_MYSQL_PASSWORD}
    volumes:
      - mariadbdata:/var/lib/mysql
    ports:
      - 3306:3306
    networks:
      local:
        aliases:
          - mariadb
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    environment:
      TZ: "America/Detroit"
    ports:
      - 9090:8080 
    networks:
      local:
        aliases:
          - adminer
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  atlas-file-service:
    container_name: atlas-file-service
    image: kingstonduo/atlas-file-service:3.3
    ports:
      - "5000:5000"
    volumes:
      - ${ENV_FLASK_HOME}:/code
    environment:
      - FLASK_ENV=production
      - MINIO_ACCESS_KEY=${ENV_MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${ENV_MINIO_SECRET_KEY}
      - MINIO_URL=${ENV_MINIO_URL}
      - BUCKET_NAME=${ENV_BUCKET_NAME}
      - MYSQL_HOST=${ENV_MYSQL_HOST}
      - MYSQL_USER=${ENV_MYSQL_USER}
      - MYSQL_PASSWORD=${ENV_MYSQL_PASSWORD}
      - "TZ=America/Detroit"
    networks:
      local:
        aliases:
          - atlas-file-service   
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "${ENV_FLUENTD_ADDRESS}"
        tag: "atlas-file-service"

  minio-s3:
    container_name: minio
    image: minio/minio
    ports:
      - "9000:9000"
    environment:
      - MINIO_ACCESS_KEY=${ENV_MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${ENV_MINIO_SECRET_KEY}
      - "TZ=America/Detroit"
    command: gateway s3
    networks:
      local:
        aliases:
          - minio-s3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"


# Commenting this section out since it is only needed the first time we set up enterprise search
#  search-setup:
#    container_name: search-setup
#    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#    volumes:
#      - certs:/usr/share/elasticsearch/config/certs
#    user: "0"
#    command: >
#      bash -c '
#        if [ x${ELASTIC_PASSWORD} == x ]; then
#          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
#          exit 1;
#        elif [ x${KIBANA_PASSWORD} == x ]; then
#          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#          exit 1;
#        fi;
#        if [ ! -f certs/ca.zip ]; then
#          echo "Creating CA";
#          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
#          unzip config/certs/ca.zip -d config/certs;
#        fi;
#        if [ ! -f certs/certs.zip ]; then
#          echo "Creating certs";
#          echo -ne \
#          "instances:\n"\
#          "  - name: es-search\n"\
#          "    dns:\n"\
#          "      - es-search\n"\
#          "      - localhost\n"\
#          "    ip:\n"\
#          "      - 127.0.0.1\n"\
#          > config/certs/instances.yml;
#          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
#          unzip config/certs/certs.zip -d config/certs;
#        fi;
#        echo "Setting file permissions"
#        chown -R root:root config/certs;
#        find . -type d -exec chmod 750 \{\} \;;
#        find . -type f -exec chmod 640 \{\} \;;
#        echo "Waiting for Elasticsearch availability";
#        until curl -s --cacert config/certs/ca/ca.crt https://es-search:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
#        echo "Setting kibana_system password";
#        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es-search:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
#        echo "All done!";
#      '
#    healthcheck:
#      test: ["CMD-SHELL", "[ -f config/certs/es-search/es-search.crt ]"]
#      interval: 1s
#      timeout: 5s
#      retries: 120

#comment out search-setup after building Elasticsearch containers for the first time. This will reduce the memory usage of the KE machines.
#once commented out, bounce the containers and verify that everything is working.

  es-search: 
    container_name: es-search
#    depends_on: #comment out this line and the line below after building Elasticsearch containers for the first time.
#      - search-setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - essearchdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es-search
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es-search
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es-search/es-search.key
      - xpack.security.http.ssl.certificate=certs/es-search/es-search.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es-search/es-search.key
      - xpack.security.transport.ssl.certificate=certs/es-search/es-search.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      local:
        aliases:
          - es-search
          
  kibana-search:
    container_name: kibana-search
    depends_on:
      - es-search
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana-search
      - ELASTICSEARCH_HOSTS=https://es-search:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ENTERPRISESEARCH_HOST=http://enterprisesearch:${ENTERPRISE_SEARCH_PORT}
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      local:
        aliases:
          - kibana-search
          
  enterprisesearch:
    container_name: enterprisesearch
    depends_on:
      - es-search
      - kibana-search
    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
    volumes:
      - certs:/usr/share/enterprise-search/config/certs
      - enterprisesearchdata:/usr/share/enterprise-search/config
      - ../enterprise-search/config/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml
    ports:
      - ${ENTERPRISE_SEARCH_PORT}:3002
    environment:
      - SERVERNAME=enterprisesearch
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      local:
        aliases:
          - enterprisesearch
          
volumes:
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  mariadbdata:
  essearchdata01:
    driver: local
  certs:
    driver: local
  kibanadata:
    driver: local
  enterprisesearchdata:
    driver: local  
  metricbeat-data01:
    driver: local

networks:
  local:
    name: dataPortal
    ipam:
      driver: default
      config:
        - 
          subnet: 10.12.0.0/16
